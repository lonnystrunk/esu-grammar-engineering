# LING 576
# Lab 6 Write-Up
# esu - Central Alaskan Yup'ik
# Lonny Strunk (writer) and Marcus Martinez
# May 10, 2019

For Lab 6, we focused our attention on implementing NP, AP, and locative NP predicates, and implementing locative NP modifiers.

Beginning of Lab 6 - Initial corpus and test suite run
Directory: 2019-05-04_021141_utc
                        corpus              test suite
a. Items parsed         13/217              41/90
b. Avg # of parses      34.92               3.27
c. Most ambig. parse    310                 30

d. Sources of ambiguity
    corpus: multiple lexical entries ('qaner-tuq', 'tai-ciq-ua'), explosion of CNN-modifying-clause-phrase when no CNN suffix present, underspecified nouns ('unuaqu') licensing subj-head or comp-head, decl-head-opt-subj on either S/VP

    test suite: multiple lexical entries ('arna-m', 'mikelngu-u-m'), explosion of CNN-modifying-clause-phrase when no CNN suffix present, decl-head-opt-subj on either S/VP

e. Reasonable semantics
    corpus: 'arnaq tekit-uq', 'aqum-i', 'arna-m assik-aa atr-a', 'elitnauriste-m assik-ai mikelngu-u-t'

    test suite: 'mikelngu-u-m ner-aa', 'kenir-aqa-ma yurar-tuq', 'aya-llini-uq', 'ki-na tekit-a?'

End of Lab 6 - Final corpus and test suite run
Directory: 2019-05-04_021142_utc
                        corpus              test suite
a. Items parsed         12/217              58/90
b. Avg # of parses      18.08               1.94
c. Most ambig. parse    130                 15

d. Sources of ambiguity
    corpus: multiple lexical entries ('qaner-tuq', 'tai-ciq-ua'), explosion of CNN-modifying-clause-phrase when no CNN suffix present, locative-pp-phrase licensed on underspecified case on nouns, decl-head-opt-subj on either S/VP

    test suite: explosion of CNN-modifying-clause-phrase when no CNN suffix present, intrans-verb-lex or trans-verb-lex licensed when using CNN suffix, decl-head-opt-subj on either S/VP

e. Reasonable semantics
    corpus: 'arnaq tekit-uq', 'aqum-i', 'arna-m assik-aa atr-a', 'elitnauriste-m assik-ai mikelngu-u-t'

    test suite: 'tuntu nerb-uq ingri-mi', 'tuntu uita-uq ingri-mi', 'tuntu ingri-mt-uq', 'una qimugte-ngu-uq', 'qimugta kaig-tuq'



1)
Phenomena: NP predicate and locative NP predicate using affixes
The first phenomena we looked at was how to handle the two verbalizing affixes: ('-ngu/-u 'to.be') and (-mete/-mt 'be.at'). These affixes attach to noun stems and turn them into intransitive verbs that need inflection. The first affix, ('-ngu/-u 'to.be'), is used to create NP predicate sentences (shown in Example 82 and 84).

#Example 82
Source: b
Vetted: f
Judgment: g
Phenomena: {NP predicate}
una qimugte-ngu-uq
this.ABS.sg dog-to.be-IND.3sg
`this is a dog'

#Example 84
Source: b
Vetted: f
Judgment: g
Phenomena: {NP predicate}
angun ui-ngu-uq
man.ABS.sg husband-to.be-IND.3sg
`the man is a husband'

The second affix, (-mete/-mt 'be.at'), is one of two strategies used to create locative NP predicates (shown in Example 78 and 81).

#Example 78 //compound morpheme
Source: b
Vetted: f
Judgment: g
Phenomena: {locative affix predicate}
tuntu ingri-mt-uq
caribou.ABS.sg mountain-be.at(LOC)-IND.3sg
`the caribou is in(on) the mountain'

#Example 81 //compound morpheme
Source: b
Vetted: f
Judgment: g
Phenomena: {locative affix predicate}
qimugte-mt-uq
dog-be.at(LOC)-IND.3sg
`it is in(on) the dog'

Emily's solution (with collaboration from David I. and Kristen) was to create a denominal-verb-lex-rule that takes lexical nouns as input and produces intransitive verbs that will become inflected. We implemented the solution in 'central alaskan yupik.tdl' and it works for the Yup'ik examples above in creating the correct semantics. The changes needed for our implementation were to add the correct noun_non_abs_sg-noun-lex, verb_pc_intrans-or-verb_pc_trans-rule-dtr, and SUBJ constraints (HEAD noun & HEAD.CASE abs), and we fixed a typo in the feature name (RESTR vs. RSTR).

denominal-verb-lex-rule-super := inflecting-lex-rule & verb_pc_intrans-or-verb_pc_trans-rule-dtr &
 [ SYNSEM [ LOCAL [ CAT [ HEAD verb,
                          VAL [ SPEC < >,
                                COMPS < >,
                                SUBJ < [ LOCAL [ CAT.HEAD noun &
                                                         [ CASE abs ],
                                                 CONT.HOOK.INDEX #xarg ] ] > ] ],
                    CONT.HOOK #hook  ],
            LKEYS.KEYREL #keyrel ],
  C-CONT [ HCONS <! qeq & [ HARG #harg,
                            LARG #larg ] !>,
           RELS <! #keyrel & arg12-ev-relation & 
                   [ LBL #ltop,
                     ARG0 #index,
                     ARG1 #xarg,
                     ARG2 #dtr_ind ],
                   quant-relation &
                   [ PRED "exist_q_rel",
                     ARG0 #dtr_ind,
                     RSTR #harg ] !>,
           ICONS <! !>,
           HOOK #hook & [ LTOP #ltop,
                  INDEX #index,
                  XARG #xarg ] ],
  DTR noun_non_abs_sg-noun-lex & [ SYNSEM.LOCAL.CONT.HOOK [ INDEX #dtr_ind,
                                               LTOP #larg ] ] ].

vbz_be_at-verb-lex-rule := denominal-verb-lex-rule-super &
  [ SYNSEM.LKEYS.KEYREL.PRED "_be+at_v_rel" ].

vbz_to_be-verb-lex-rule := denominal-verb-lex-rule-super &
  [ SYNSEM.LKEYS.KEYREL.PRED "_be_v_id_rel" ].



Phenomena: Locative NP modifier
The next phenomenon we looked at was the locative NP modifier. The NP modifier is indicated in Yup'ik as a noun with case LOC. This is used to modify the VP and indicate location (shown in Example 70 and 72).

#Example 70 // PP modifier on VP
Source: b
Vetted: f
Judgment: g
Phenomena: {locative NP modifier}
tuntu nerb-uq ingri-mi
caribou.ABS.sg eat-IND.3sg mountain-LOC.sg
`the caribou is eating in(on) the mountain'

#Example 72 // PP modifier on VP
Source: b
Vetted: f
Judgment: g
Phenomena: {locative NP modifier}
angun kenir-tuq ingri-mi
man.ABS.sg cook-IND.3sg mountain-LOC.sg
`the man is cooking in(on) the mountain'

We implemented the phenomena by using the PP over NP rule used by the Marathi grammar in 2014. Other than a mistake in the path name (MOD<[SYNSEM.LOCAL]> vs. MOD<[LOCAL]>), the rule we added to 'central alaskan yupik.tdl' works correctly for the examples above.

locative-pp-phrase := unary-phrase &
  [ SYNSEM [ LOCAL.CAT [ HEAD adp & [ MOD < [ LOCAL intersective-mod &
                                                           [ CAT.HEAD verb,
                                                             CONT.HOOK.INDEX #xarg ] ] > ],
                         VAL [ COMPS < >,
                         SUBJ < >, 
                         SPR < > ] ] ],
    C-CONT [ HOOK [ LTOP #ltop,
                    INDEX #index,
                    XARG #xarg ],
             RELS <! arg12-ev-relation &
                     [ PRED "_loc_p_rel",
                       LBL #ltop,
                       ARG0 #index,
                       ARG1 #xarg,
                       ARG2 #dtr ] !>,
             HCONS <! !>  ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD noun & 
                                       [CASE loc],
                                  VAL.SPR < > ],
                            CONT.HOOK [ INDEX #dtr ] ] ] > ].

This rule creates the PP over NP correctly but needs to be licensed into the grammar by another rule that combines an S/VP with a PP. We had the scopal head-adj and adj-head rules in 'rules.tdl' from our work with clausal modifiers, but we needed to add the non-scopal ("intersective") versions.

adj-head-int := adj-head-int-phrase.

head-adj-int := head-adj-int-phrase.



Phenomena: Locative NP predicate using (uita 'stay') as a copula
The next phenomena we handled looks similar to the locative NP modifier and so we were expecting to just add another verb stem that takes a PP over NP modifier. But after asking Emily what this phenomenon is, she suggested that we treat (uita 'stay') as a copula (shown in Example 74 and 75).

#Example 74 // separate verb - to stay, to reside, to live
Source: b
Vetted: f
Judgment: g
Phenomena: {locative NP predicate}
tuntu uita-uq ingri-mi
caribou.ABS.sg stay-IND.3sg mountain-LOC.sg
`the caribou is in(on) the mountain'

#Example 75 // separate verb - to stay, to reside, to live
Source: b
Vetted: f
Judgment: g
Phenomena: {locative NP predicate}
angun uita-uq qaya-mi
man.ABS.sg stay-IND.3sg kayak-LOC.sg
`the man is in the kayak'

The implementation for this phenomenon in 'central alaskan yupik.tdl' was to create a new semantically empty raising verb lexical rule for (uita 'stay') and add the verb_pc_intrans-or-verb_pc_trans-rule-dtr to the supertypes. (This was taken from the lab6 website.) The lexical entry in 'lexicon.tdl' inherited from this lexical rule, copula-verb-lex.

copula-verb-lex := basic-verb-lex-super & trans-first-arg-raising-lex-item-2 & verb_pc_intrans-or-verb_pc_trans-rule-dtr &
  [ SYNSEM.LOCAL [ CAT [ HEAD.MOD < >,
                         VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CONT.HOOK.INDEX #xarg,
                       CAT [ VAL [ SPR < >,
                                   COMPS < > ],
                             HEAD noun ] ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ COMPS < > ],
                           HEAD +jp ] ] > ].



Phenomena: AP predicates
Adjectives in Yup'ik are either presented as a noun stem, a verb stem, or a noun derivational suffix. The noun stems have to be verbalized to be used as AP predicates, and the verb stems have to be nominalized to be used with NPs. The noun derivational suffixes attach to noun stems to create a modified noun stem. These variations are shown below. 

// adjective verb stem
qimugta kavircet-uq
dog.ABS.sg to.be.red-IND.sg
the dog is red

// nominalized adjective verb stem
qimugta kavircete-llria nerb-uq
dog.ABS.sg to.be.red-one.who.V.ABS.sg eat-IND.sg
the red dog is eating

// adjective noun stem
qimugta cungagliq nerb-uq
dog.ABS.sg green.thing.ABS.sg
the green dog is eating

// verbalized adjective noun stem
qimugta cungagli-u-guq
dog.ABS.sg green.thing-to.be-IND.sg
the dog is green

// noun derivational suffix
tuntu-rpak ingri-mt-uq
caribou-big.ABS.sg mountain-be.at(LOC)-IND.3sg
`the big caribou is on the mountain'

// noun derivational suffix before verbalization
tuntu ingri-rpag-met-uq
caribou.ABS.sg mountain-big-be.at(LOC)-IND.3sg
`the caribou is on the big mountain'

We decided to only handle the adjective verb stems. We represented the adjective verb stems as adjectives that become verbalized. These are then used in AP predicates (shown in Example 88 and 90). (Emily mentioned that these might not be adjectives, but rather stative verbs.)

#Example 88
Source: b
Vetted: f
Judgment: g
Phenomena: {AP predicate}
tuntu angnir-tuq
caribou-ABS.sg to.be.happy-IND.3pl
`the caribou is happy'

#Example 90
Source: b
Vetted: f
Judgment: g
Phenomena: {AP predicate}
qimugta kaig-tuq
woman-ABS.pl to.be.hungry-IND.3pl
`the dog is hungry'

The solution we decided on was to model the "deadjectival" rule after the denominal verbalizer rule with changes in the semantics (ARG1 being the SUBJ and no ARG2) and daughter lexical entry (#index of the dtr is the #index of the predicate). The adjectives in 'lexicon.tdl' inherited from this lexical rule, deadjectival-verb-lex-rule.

deadjectival-verb-lex-rule := inflecting-lex-rule & verb_pc_intrans-or-verb_pc_trans-rule-dtr &
 [ SYNSEM [ LOCAL [ CAT [ HEAD verb,
                          VAL [ SPEC < >,
                                COMPS < >,
                                SUBJ < [ LOCAL [ CAT.HEAD noun &
                                                         [ CASE abs ],
                                                 CONT.HOOK.INDEX #xarg ] ] > ] ],
                    CONT.HOOK #hook  ],
            LKEYS.KEYREL #keyrel ],
  C-CONT [ RELS <! #keyrel & arg1-ev-relation & 
                   [ LBL #ltop,
                     ARG0 #index,
                     ARG1 #xarg ] !>,
           ICONS <! !>,
           HOOK #hook & [ LTOP #ltop,
                  INDEX #index,
                  XARG #xarg ] ],
  DTR basic-intersective-adjective-lex & [ SYNSEM.LOCAL.CONT.HOOK [ INDEX #index ] ] ].



2)
LKB Generation
Generation with the LKB didn't work initially. Marcus used a simple sentence,

tuntu yurar-tuq
caribou.ABS.sg dance.IND.3sg
the caribou is dancing

to test generation, first with (setf *maximum-number-of-edges* 400) then with 1000, but neither worked. He checked the gen-chart, using (pprint *gen-chart*), and found some overly repetitious rules. He commented out the rule and tried again, but he had to repeat this process until all four of the following rules were commented out: head-adj-int, adj-head-int, adj-head-scop, head-adj-scop.

Generation worked after this process. In order to get adj rules working with generation, he uncommented out one rule, head-adj-int, set the edge limit to 100, and reran the generation. After looking at 'Generate | Show gen chart' from the LKB menu and showing this tree to Emily, they found that the issue was with the (uita 'stay') copula. Because (uita 'stay') is a semantically empty copula, we had to go to the copula-verb-lex rule that licenses it and change the tdl so that it specifies an empty mod list (as seen above in the copula-verb-lex tdl). After all of the adj rules were added back in, generation works now.



3)
Ace Compilation and Generation
Compilation and parsing were working for Yup'ik until I pushed some changes to the tdl that ace did not like. There were missing '&'s after the last supertype on a number of rules. After these fixes, the grammar compiled and was parsing in ace. After finding and fixing the issues with generation in the LKB and a mistake with the command (ace -g esu.dat -Tfl vs -Tf1), generation works in ace as well.

